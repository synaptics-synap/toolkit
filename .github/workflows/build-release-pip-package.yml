name: Build and Release pip package

on:
  workflow_dispatch:
    inputs:
      release_name:
        description: 'Name of the draft release to upload to'
        required: true

permissions:
  packages: write
  contents: write

jobs:
  build:
    name: Build pip package
    runs-on: ubuntu-22.04

    strategy:
      matrix:
        python-version: [3.10.12, 3.12.4]

    steps:
    - name: Checkout toolkit repository
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.release.target_commitish }}
        lfs: true

    - name: Create prebuilts directory
      run: mkdir -p pysynap/prebuilts

    - name: Checkout toolkit-prebuilts repository
      uses: actions/checkout@v4
      with:
        repository: synaptics-synap/toolkit-prebuilts
        ref: main
        path: pysynap/prebuilts
        lfs: true

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Add __init__.py to scripts and prebuilts directories
      run: |
        mkdir -p pysynap/scripts
        touch pysynap/scripts/__init__.py
        touch pysynap/prebuilts/__init__.py
        touch pysynap/external/__init__.py
        touch pysynap/external/tflite/__init__.py
      working-directory: ${{ github.workspace }}

    - name: Install dependencies
      run: |
          python -m pip install --upgrade pip
          pip install build
          pip install --upgrade twine

    - name: Build wheel for Python ${{ matrix.python-version }}
      run: |
        python3 -m build

    - name: Get wheel file name
      run: |
        WHEEL_FILE=$(ls dist/*.whl)
        if [ -z "$WHEEL_FILE" ]; then
          echo "No wheel file found"
          exit 1
        fi
        echo "WHEEL_FILE=$(basename $WHEEL_FILE)" >> $GITHUB_ENV

    - name: Get specified draft release
      uses: actions/github-script@v6
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const releaseName = '${{ github.event.inputs.release_name }}';
          const { data: releases } = await github.rest.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo
          });
          const draftRelease = releases.find(release => 
            release.draft === true && release.name === releaseName
          );
          if (draftRelease) {
            const fs = require('fs');
            fs.appendFileSync(process.env.GITHUB_ENV, `upload_url=${draftRelease.upload_url}\n`);
          } else {
            core.setFailed(`No draft release found with name: ${releaseName}`);
          }

    - name: Upload wheel as asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ env.upload_url }}
        asset_path: dist/${{ env.WHEEL_FILE }}
        asset_name: ${{ env.WHEEL_FILE }}
        asset_content_type: application/zip